{"version":3,"sources":["components/ContactForm/ContactForm.module.css","redux/contacts/contactsSelectors.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/ContactForm/HeaderForm/HeaderForm.js","components/ContactForm/LogoForm/logo.svg","components/ContactForm/LogoForm/LogoForm.js","views/ContactsView/ContactsView.js"],"names":["module","exports","getFilter","state","contacts","filter","selestors","getModalwarning","modalWarning","getContactsItems","contactsItems","getLoading","loading","getVisibleContacts","createSelector","item","name","toLowerCase","includes","axios","defaults","baseURL","operations","addContact","number","dispatch","contactsActions","addContactRequest","post","then","response","addContactSuccess","data","catch","error","addContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","map","contact","sameNameContact","length","info","title","text","onAddContact","className","styles","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","placeholder","autoComplete","autoFocus","onChange","format","mask","TaskEditor_button","Component","mapDispatchToProps","contactsOperations","onSameNameContact","showModalWarning","connect","contactsSelectors","onRemoveContact","TransitionGroup","component","CSSTransition","timeout","classNames","IconButton","aria-label","color","onClick","onChangeFilter","changeFilter","HeaderForm","LogoForm","src","logo","alt","ContactsView","onFetchContacts","in","appear","unmountOnExit","stage","isLoadingContacts","Loader"],"mappings":"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","file":"static/js/4.71d07cad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__2snUU\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__3t92U\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__-IskZ\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__1G7Ta\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__3ahNL\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.contactsItems;\r\nconst getModalwarning = state => state.contacts.modalWarning;\r\nconst getContactsItems = state => state.contacts.contactsItems;\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector([getContacts, getFilter], (contactsItems, filter) => {\r\n    return contactsItems.filter(item =>\r\n        item.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n});\r\n\r\nconst selestors = {\r\n    getModalwarning,\r\n    getContactsItems,\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n};\r\n\r\nexport default selestors;","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n\r\n    dispatch(contactsActions.addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', { name, number })\r\n        .then(response => dispatch(contactsActions.addContactSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.addContactError(error)))\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(response => dispatch(contactsActions.fetchContactsSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.fetchContactsError(error)))\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n    dispatch(contactsActions.removeContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n        .catch(error => dispatch(contactsActions.removeContactError(error)))\r\n};\r\n\r\nconst operations = {\r\n    addContact,\r\n    fetchContacts,\r\n    removeContact\r\n};\r\n\r\nexport default operations;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport NumberFormat from 'react-number-format';\r\nimport { error, info } from '@pnotify/core';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        onAddContact: PropTypes.func\r\n    };\r\n    \r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const { name, number } = this.state;\r\n\r\n        const sameNameContact = name => {\r\n            return this.props.contactsItems\r\n            .map(contact => contact.name)\r\n            .includes(name);\r\n        }\r\n        \r\n        // const inputNumber = Number(number)\r\n\r\n        if (sameNameContact(name)) {\r\n            error({\r\n                title: 'Error',\r\n                text: `Name \"${name}\" already exist`\r\n            })\r\n        \r\n        } else if (name.length === 0) {\r\n            info({\r\n                title: 'Info',\r\n                text: \"Field 'Name' must be filled!\"\r\n            });\r\n        } else if (number.length === 0) {\r\n            info({\r\n                title: 'Info',\r\n                text: \"Field 'Number' must be filled!\"\r\n            })\r\n        // } else if (name === '' || number === '') {\r\n        //     alert(\"All fields must be filled\")\r\n        }\r\n        // else if (!inputNumber) {\r\n        //     info({\r\n        //         title: 'Info',\r\n        //         text: 'Enter the number!'\r\n        //     })\r\n        // }\r\n        else {\r\n            this.props.onAddContact({ ...this.state });\r\n        }\r\n\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n  \r\n    render() {\r\n        return (\r\n            <form\r\n                className={styles.TaskEditor}\r\n                onSubmit={this.handleSubmit}>\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Name\r\n                        <input\r\n                            className={styles.TaskEditor_input}\r\n                            type=\"tel\"\r\n                            name=\"name\"\r\n                            placeholder=\"Your name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus=\"on\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                </label>\r\n\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Number\r\n                    <NumberFormat\r\n                        format=\"(###) ###-##-##\"\r\n                        mask=\"_\"\r\n                        // pattern=\"^[0-9\\s\\(\\)\\-]{15}\"\r\n                        className={styles.TaskEditor_input}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        placeholder=\"Your number\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button\r\n                    className={styles.TaskEditor_button}\r\n                    type=\"submit\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      contactsItems: contactsSelectors.getContactsItems(state),\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onAddContact: contactsOperations.addContact,\r\n    onSameNameContact: contactsActions.showModalWarning\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n// import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport './ContactList.css';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n    <>\r\n        <TransitionGroup\r\n            component=\"ul\"\r\n            className=\"TaskList\">\r\n            \r\n            {contacts.map(({id, name, number}) => (\r\n                <CSSTransition\r\n                    key={id}\r\n                    timeout={250}\r\n                    classNames=\"ContactListAppear\"\r\n                    // unmountOnExit\r\n                >\r\n                    <li\r\n                        className=\"TaskList_item\"\r\n                        /*key={contact.id}*/>\r\n                        {/* {text.name}: {text.number} */}\r\n                        {name}: {number}\r\n                        <IconButton\r\n                            aria-label=\"delete\"\r\n                            color=\"secondary\"\r\n                            // className=\"TaskList_button\"\r\n                            type=\"button\"\r\n                            name=\"delete\"\r\n                            onClick={() => onRemoveContact(id)}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                        \r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    </>\r\n    \r\n);\r\n    \r\n// ContactList.propTypes = {\r\n//     contacts: PropTypes.arrayOf(\r\n//         PropTypes.shape({\r\n//             id: PropTypes.number,\r\n//             name: PropTypes.string,\r\n//             number: PropTypes.string,\r\n//         })),\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onRemoveContact: contactsOperations.removeContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './Filter.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <div className=\"Filter\">\r\n        <h2 className=\"FilterName\">Find contacts by name</h2>\r\n        <input className=\"FilterInput\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            value={value}\r\n            onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onChangeFilter: contactsActions.changeFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport './HeaderForm.css';\r\n\r\nfunction HeaderForm() {\r\n  return (\r\n    <h1 className=\"HeaderName\">Phonebook</h1>\r\n  );\r\n}\r\n\r\nexport default HeaderForm;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './LogoForm.css';\r\n\r\nfunction LogoForm() {\r\n    return (\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    );\r\n};\r\n\r\nexport default LogoForm;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ContactForm from '../../components/ContactForm/ContactForm';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport HeaderForm from '../../components/ContactForm/HeaderForm/HeaderForm';\r\nimport LogoForm from '../../components/ContactForm/LogoForm/LogoForm';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport Loader from '../../helpers/Loader/Loader';\r\nimport './ContactsView.css';\r\n\r\nclass ContactsView extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Wrapper\">\r\n                \r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    timeout={500}\r\n                    classNames=\"HeaderAppear\"\r\n                    unmountOnExit\r\n                >\r\n                {stage => {\r\n                    // console.log(stage);\r\n                    return (\r\n                        <div className=\"Header\">\r\n\r\n                            <HeaderForm />\r\n\r\n                            <CSSTransition\r\n                                in={stage === 'entered'}\r\n                                timeout={500}\r\n                                classNames=\"LogoAppear\"\r\n                                unmountOnExit\r\n                            >\r\n                                <LogoForm />\r\n\r\n                            </CSSTransition>\r\n                        </div>\r\n                    )\r\n                }}\r\n                </CSSTransition>\r\n\r\n                <ContactForm />\r\n\r\n                <CSSTransition\r\n                    in={this.props.contactsItems.length > 1}\r\n                    timeout={250}\r\n                    classNames=\"FilterAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <Filter/>\r\n                </CSSTransition>\r\n\r\n                {this.props.isLoadingContacts && <Loader />}\r\n\r\n                <CSSTransition\r\n                    in={this.props.contactsItems.length > 0}\r\n                    timeout={250}\r\n                    classNames=\"ContactsAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <h2 className=\"ContactsName\">\r\n                        Contacts\r\n                    </h2>\r\n                </CSSTransition>\r\n\r\n                <ContactList />\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contactsItems: contactsSelectors.getContactsItems(state),\r\n        isLoadingContacts: contactsSelectors.getLoading(state),\r\n    }\r\n};  \r\n\r\nconst mapDispatchToProps = {\r\n    onFetchContacts: contactsOperations.fetchContacts,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}