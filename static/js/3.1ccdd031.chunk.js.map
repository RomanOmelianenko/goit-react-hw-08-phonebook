{"version":3,"sources":["components/ContactForm/ContactForm.module.css","redux/contacts/contactsSelectors.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","getFilter","state","contacts","filter","selestors","getModalwarning","modalWarning","getContactsItems","contactsItems","getLoading","loading","getVisibleContacts","createSelector","item","name","toLowerCase","includes","axios","defaults","baseURL","operations","addContact","number","dispatch","contactsActions","addContactRequest","post","then","response","addContactSuccess","data","catch","error","addContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","sameNameContact","props","map","contact","inputNumber","Number","onSameNameContact","setTimeout","length","alert","onAddContact","className","styles","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","placeholder","autoComplete","autoFocus","onChange","TaskEditor_button","Component","mapDispatchToProps","contactsOperations","showModalWarning","connect","contactsSelectors","onRemoveContact","TransitionGroup","component","CSSTransition","timeout","classNames","onClick","onChangeFilter","changeFilter","ContactsView","onFetchContacts","isLoadingContacts"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,WAAa,gCAAgC,iBAAmB,sCAAsC,iBAAmB,sCAAsC,gBAAkB,qCAAqC,kBAAoB,yC,yKCKtPC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAgB3BC,EARG,CACdC,gBAZoB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,cAa5CC,iBAZqB,SAAAN,GAAK,OAAIA,EAAMC,SAASM,eAa7CC,WAZe,SAAAR,GAAK,OAAIA,EAAMC,SAASQ,SAavCV,YACAW,mBAXuBC,YAAe,CANtB,SAAAX,GAAK,OAAIA,EAAMC,SAASM,eAMYR,IAAY,SAACQ,EAAeL,GAChF,OAAOK,EAAcL,QAAO,SAAAU,GAAI,OAC5BA,EAAKC,KAAKC,cAAcC,SAASb,EAAOY,sB,iBCPhDE,IAAMC,SAASC,QAAU,4CAEzB,IAkCeC,EANI,CACfC,WA7Be,SAAC,GAAD,IAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,OAAT,OAAsB,SAAAC,GAErCA,EAASC,IAAgBC,qBAEzBR,IACKS,KAAK,YAAa,CAAEZ,OAAMQ,WAC1BK,MAAK,SAAAC,GAAQ,OAAIL,EAASC,IAAgBK,kBAAkBD,EAASE,UACrEC,OAAM,SAAAC,GAAK,OAAIT,EAASC,IAAgBS,gBAAgBD,SAuB7DE,cApBkB,kBAAM,SAAAX,GACxBA,EAASC,IAAgBW,wBAEzBlB,IACKmB,IAAI,aACJT,MAAK,SAAAC,GAAQ,OAAIL,EAASC,IAAgBa,qBAAqBT,EAASE,UACxEC,OAAM,SAAAC,GAAK,OAAIT,EAASC,IAAgBc,mBAAmBN,SAehEO,cAZkB,SAAAC,GAAE,OAAI,SAAAjB,GACxBA,EAASC,IAAgBiB,wBAEzBxB,IACKyB,OADL,oBACyBF,IACpBb,MAAK,kBAAMJ,EAASC,IAAgBmB,qBAAqBH,OACzDT,OAAM,SAAAC,GAAK,OAAIT,EAASC,IAAgBoB,mBAAmBZ,U,iBCtB9Da,E,4MAOF5C,MAAQ,CACJa,KAAM,GACNQ,OAAQ,I,EAGZwB,aAAe,SAACC,GAAO,IAAD,EACMA,EAAEC,OAAlBlC,EADU,EACVA,KAAMmC,EADI,EACJA,MACd,EAAKC,SAAL,eACKpC,EAAOmC,K,EAIhBE,aAAe,SAAAJ,GACXA,EAAEK,iBADc,MAGS,EAAKnD,MAAtBa,EAHQ,EAGRA,KAAMQ,EAHE,EAGFA,OAER+B,EAAkB,EAAKC,MAAM9C,cAC9B+C,KAAI,SAAAC,GAAO,OAAIA,EAAQ1C,QACvBE,SAASF,GAER2C,EAAcC,OAAOpC,GAEvB+B,GACA,EAAKC,MAAMK,oBACXC,YAAW,WACP,EAAKN,MAAMK,sBACZ,OACoB,IAAhB7C,EAAK+C,OACZC,MAAM,gCACmB,IAAlBxC,EAAOuC,OACdC,MAAM,kCACEL,EAGR,EAAKH,MAAMS,aAAX,eAA6B,EAAK9D,QAFlC6D,MAAM,qBAKV,EAAKZ,SAAS,CAAEpC,KAAM,GAAIQ,OAAQ,M,uDAIlC,OACI,uBACI0C,UAAWC,IAAOC,WAClBC,SAAUC,KAAKjB,aAFnB,UAGI,wBACIa,UAAWC,IAAOI,iBADtB,iBAGQ,uBACIL,UAAWC,IAAOK,iBAClBC,KAAK,OACLzD,KAAK,OACL0D,YAAY,YACZC,aAAa,MACbC,UAAU,KACVzB,MAAOmB,KAAKnE,MAAMa,KAClB6D,SAAUP,KAAKtB,kBAI3B,wBACIkB,UAAWC,IAAOI,iBADtB,mBAGI,uBACIL,UAAWC,IAAOK,iBAClBC,KAAK,OACLzD,KAAK,SACL0D,YAAY,cACZC,aAAa,MACbxB,MAAOmB,KAAKnE,MAAMqB,OAClBqD,SAAUP,KAAKtB,kBAIvB,wBACIkB,UAAWC,IAAOW,kBAClBL,KAAK,SAFT,gC,GAlFUM,aAkGpBC,EAAqB,CACvBf,aAAcgB,EAAmB1D,WACjCsC,kBAAmBnC,IAAgBwD,kBAGxBC,eAXS,SAAAhF,GACtB,MAAO,CACHO,cAAe0E,EAAkB3E,iBAAiBN,MAShB6E,EAAzBG,CAA6CpC,G,gBCzDtDiC,G,MAAqB,CACvBK,gBAAiBJ,EAAmBxC,gBAGzB0C,eARS,SAAAhF,GAAK,MAAK,CAC9BC,SAAUgF,EAAkBvE,mBAAmBV,MAOX6E,EAAzBG,EAlDK,SAAC,GAAD,IAAG/E,EAAH,EAAGA,SAAUiF,EAAb,EAAaA,gBAAb,OAChB,cAACC,EAAA,EAAD,CACIC,UAAU,KACVrB,UAAU,WAFd,SAIK9D,EAASqD,KAAI,gBAAEf,EAAF,EAAEA,GAAI1B,EAAN,EAAMA,KAAMQ,EAAZ,EAAYA,OAAZ,OACV,cAACgE,EAAA,EAAD,CAEIC,QAAS,IACTC,WAAW,oBAHf,SAMI,qBACIxB,UAAU,gBADd,UAIKlD,EAJL,KAIaQ,EAEL,wBACI0C,UAAU,kBACVO,KAAK,SACLzD,KAAK,SACL2E,QAAS,kBAAMN,EAAgB3C,IAJnC,mBAXHA,WCafsC,G,MAAqB,CACvBY,eAAgBlE,IAAgBmE,eAGrBV,eARS,SAAAhF,GAAK,MAAK,CAC9BgD,MAAOiC,EAAkBlF,UAAUC,MAOC6E,EAAzBG,EAzBA,SAAC,GAAD,IAAGhC,EAAH,EAAGA,MAAOyC,EAAV,EAAUA,eAAV,OACX,sBAAK1B,UAAU,SAAf,UACI,oBAAIA,UAAU,aAAd,mCACA,uBAAOA,UAAU,cACbO,KAAK,OACLC,YAAY,aACZvB,MAAOA,EACP0B,SAAU,SAAA5B,GAAC,OAAI2C,EAAe3C,EAAEC,OAAOC,gBCL7C2C,E,kLA4BExB,KAAKd,MAAMuC,oB,+BAIX,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GApCWhB,aAkDrBC,EAAqB,CACvBe,gBAAiBd,EAAmB7C,eAGzB+C,uBAXS,SAAAhF,GACpB,MAAO,CACH6F,kBAAmBZ,EAAkBzE,WAAWR,MAShB6E,EAAzBG,CAA6CW","file":"static/js/3.1ccdd031.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__2snUU\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__3t92U\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__-IskZ\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__1G7Ta\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__3ahNL\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.contactsItems;\r\nconst getModalwarning = state => state.contacts.modalWarning;\r\nconst getContactsItems = state => state.contacts.contactsItems;\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector([getContacts, getFilter], (contactsItems, filter) => {\r\n    return contactsItems.filter(item =>\r\n        item.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n});\r\n\r\nconst selestors = {\r\n    getModalwarning,\r\n    getContactsItems,\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n};\r\n\r\nexport default selestors;","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n\r\n    dispatch(contactsActions.addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', { name, number })\r\n        .then(response => dispatch(contactsActions.addContactSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.addContactError(error)))\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(response => dispatch(contactsActions.fetchContactsSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.fetchContactsError(error)))\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n    dispatch(contactsActions.removeContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n        .catch(error => dispatch(contactsActions.removeContactError(error)))\r\n};\r\n\r\nconst operations = {\r\n    addContact,\r\n    fetchContacts,\r\n    removeContact\r\n};\r\n\r\nexport default operations;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        onAddContact: PropTypes.func\r\n    };\r\n    \r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const { name, number } = this.state;\r\n\r\n        const sameNameContact = this.props.contactsItems\r\n            .map(contact => contact.name)\r\n            .includes(name);\r\n        \r\n        const inputNumber = Number(number)\r\n\r\n        if (sameNameContact) {\r\n            this.props.onSameNameContact();\r\n            setTimeout(() => {\r\n                this.props.onSameNameContact();\r\n            }, 1500);\r\n        } else if (name.length === 0) {\r\n            alert(\"Field 'Name' must be filled!\");\r\n        } else if (number.length === 0) {\r\n            alert(\"Field 'Number' must be filled!\")\r\n        } else if (!inputNumber) {\r\n            alert(\"Insert the number\")\r\n        } else {\r\n            this.props.onAddContact({ ...this.state });\r\n        }\r\n\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n  \r\n    render() {\r\n        return (\r\n            <form\r\n                className={styles.TaskEditor}\r\n                onSubmit={this.handleSubmit}>\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Name\r\n                        <input\r\n                            className={styles.TaskEditor_input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Your name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus=\"on\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                </label>\r\n\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Number\r\n                    <input\r\n                        className={styles.TaskEditor_input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        placeholder=\"Your number\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button\r\n                    className={styles.TaskEditor_button}\r\n                    type=\"submit\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      contactsItems: contactsSelectors.getContactsItems(state),\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onAddContact: contactsOperations.addContact,\r\n    onSameNameContact: contactsActions.showModalWarning\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n// import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './ContactList.css';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n    <TransitionGroup\r\n        component=\"ul\"\r\n        className=\"TaskList\">\r\n            \r\n        {contacts.map(({id, name, number}) => (\r\n            <CSSTransition\r\n                key={id}\r\n                timeout={250}\r\n                classNames=\"ContactListAppear\"\r\n                // unmountOnExit\r\n            >\r\n                <li\r\n                    className=\"TaskList_item\"\r\n                    /*key={contact.id}*/>\r\n                    {/* {text.name}: {text.number} */}\r\n                    {name}: {number}\r\n                    {\r\n                        <button\r\n                            className=\"TaskList_button\"\r\n                            type=\"button\"\r\n                            name=\"delete\"\r\n                            onClick={() => onRemoveContact(id)}\r\n                        >\r\n                            x\r\n                        </button>\r\n                    }\r\n                </li>\r\n            </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n);\r\n    \r\n// ContactList.propTypes = {\r\n//     contacts: PropTypes.arrayOf(\r\n//         PropTypes.shape({\r\n//             id: PropTypes.number,\r\n//             name: PropTypes.string,\r\n//             number: PropTypes.string,\r\n//         })),\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onRemoveContact: contactsOperations.removeContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './Filter.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <div className=\"Filter\">\r\n        <h2 className=\"FilterName\">Find contacts by name</h2>\r\n        <input className=\"FilterInput\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            value={value}\r\n            onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onChangeFilter: contactsActions.changeFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\nimport contactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\r\n// import { authSelectors } from '../redux/auth';\r\n\r\nclass ContactsView extends Component {\r\n\r\n    // 111 Заместь этого делаем свои кастомные компоненты, которые расширяют функционал базавого раута\r\n    // приватный и публичный рауты, которые под капотом будут делать приблизительно тоже, что ниже\r\n    //  componentDidMount() {\r\n    //     /* для приватного маршрута - если пользователь не зарег, сделать Redirect */\r\n    //     if (!this.props.isLogged) {\r\n    //         this.props.history.replace('/login');   /* если пользователь не зарег, верни на /login */\r\n\r\n    //         return; /* если пользователь не зарег делаем return чтобы дальше не выполнился код */\r\n    //     };\r\n    //     // проверь состояние авторизации и если польз не зарег то перенаправь его (в этом случае на /login)\r\n    // // --------------------------------------------------------------------------\r\n\r\n    //     this.props.onFetchContacts();\r\n    // };\r\n\r\n    // // делаем для logout приватный маршрут. Если польз сделал logout раправляем его на /login\r\n    // componentDidUpdate() {\r\n    //     if (!this.props.isLogged) {\r\n    //         this.props.history.replace('/login');\r\n\r\n    //         return;\r\n    //     };\r\n    // }; \r\n    // ------------------------------------------------------------------------------------- \r\n\r\n    componentDidMount() {\r\n        this.props.onFetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ContactForm />\r\n                <Filter />\r\n                <ContactList />\r\n                {/* <h2>Contacts List</h2> */}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoadingContacts: contactsSelectors.getLoading(state),\r\n        // isLogged: authSelectors.isLogIn(state),                 /*для 111 для приватного маршрута */\r\n    }\r\n};  \r\n\r\nconst mapDispatchToProps = {\r\n    onFetchContacts: contactsOperations.fetchContacts,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}